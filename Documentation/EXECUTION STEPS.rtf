{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ### Running NodeMCU Code in Arduino IDE:\
\
1. Open the Arduino IDE.\
2. Copy and paste the NodeMCU code into a new sketch.\
3. Connect your NodeMCU board to your computer via USB.\
4. Select the appropriate board and port in the Arduino IDE.\
5. Click on the "Upload" button to compile and upload the code to the NodeMCU board.\
6. Once uploaded, the NodeMCU will start collecting sensor data and transmitting it wirelessly.\
\
### Running KNN Python Code in Raspberry Pi 4 Environment:\
\
1. Open a terminal on your Raspberry Pi 4.\
2. Navigate to the directory where your Python script (`knn_script.py`) is located.\
3. Ensure that Python and required libraries (such as `pandas`, `sklearn`, `firebase`) are installed in your Raspberry Pi environment. You can install them using `pip` if not already installed.\
4. Run the Python script using the following command:\
\
  \
   python knn_script.py\
  \
\
5. The script will establish a connection to Firebase, load the dataset, train the KNN model, establish serial communication with the NodeMCU, and continuously send sensor data to Firebase while making predictions.\
\
### Execution Steps:\
\
1. Start by uploading and running the NodeMCU code in the Arduino IDE. This will enable the NodeMCU to collect sensor data and transmit it wirelessly.\
2. Once the NodeMCU code is running and transmitting data, switch to the Raspberry Pi environment.\
3. Navigate to the directory containing the Python script (`knn_script.py`) in the terminal.\
4. Execute the Python script by running the command mentioned above.\
5. The Python script will start receiving sensor data from the NodeMCU, making predictions using the trained KNN model, and sending both the sensor data and predictions to the Firebase Realtime Database.\
\
By following these steps, you can effectively collect sensor data wirelessly using NodeMCU, perform real-time predictions using machine learning on a Raspberry Pi 4, and store the data in Firebase for further analysis or visualization.}